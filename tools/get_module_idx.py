#!/usr/bin/env python
from pprint import pprint
from io import BytesIO
from sphinx.util.inventory import InventoryFile
from urllib.parse import urljoin
from fastcore.utils import urlread,merge
from collections import defaultdict

class SphinxIndex:
    def __init__(self, url):
        invs = urlread(f'{url}/objects.inv')
        self.idx = InventoryFile.load(stream=BytesIO(invs), uri=url, joinfunc=urljoin)
        typs = 'module','class','method','function'
        self.d = {o:self._get(o) for o in typs}
        self.syms = defaultdict(dict)
        for o in typs[1:]:
            for k,v in self.d[o].items():
                modparts = k.split(".")[:-2 if o=='method' else -1]
                if modparts: self.syms['.'.join(modparts)][k] = v

    def _get(self, o): return {k:v[2] for k,v in self.idx[f'py:{o}'].items() if k[0]!='_'}

idx = SphinxIndex('https://docs.python.org/3')

nm = 'nbdev_stdlib'
with open(f'{nm}/_modidx.py', 'w') as f:
    f.write("# Autogenerated by get_module_idx.py\n\nd = ")
    d = dict(mods=idx.d['module'], syms=dict(idx.syms), settings={'lib_path':nm})
    pprint(d, f, width=160, indent=2, compact=True, sort_dicts=False)

