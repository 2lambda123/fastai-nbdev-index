from bs4 import BeautifulSoup
from fastcore.all import *
from pprint import pprint
from urllib.parse import urljoin,urldefrag

def url_soup(url): return BeautifulSoup(urlread(url), 'html.parser')
def url_select(url, sel): return url_soup(url).select(sel)

url_pre = 'https://docs.python.org/3/'

def mods_from_sphinx():
    from sphinx.util.inventory import InventoryFile
    from io import BytesIO
    invs = urlread(f'{url_pre}/objects.inv')
    ifile = InventoryFile.load(stream=BytesIO(invs), uri=url_pre, joinfunc=urljoin)
    return {k:v[2] for k,v in ifile['py:module'].items() if k[0]!='_'}

def mods_from_docs():
    return {o.text:f"{url_pre}{o.parent.get('href')}"
            for o in url_select(f'{url_pre}py-modindex.html', 'a > code.xref')
            if o.text[0]!='_'}

mods = mods_from_docs()

def mod_syms(mod, modurl):
    without_anc = urldefrag(modurl)
    try: moddoc = url_soup(modurl)
    except: raise Exception(modurl) from None
    return {m.parent.get('id'):without_anc+m.get('href')
            for m in moddoc.select(f'dt[id^="{mod}"] > a')}

syms = {k:mod_syms(k,v) for k,v in mods.items()}

with open('nbdev/python_mods.py', 'w') as f:
    f.write("# Autogenerated by get_python_mods.py\n\nmods = ")
    pprint(mods, f)
    f.write(f"\nsyms = ")
    pprint(syms, f)
    f.write(f"\n")

